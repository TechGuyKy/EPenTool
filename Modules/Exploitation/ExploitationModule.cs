using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using EPenT.Core;
using EPenT.Models.Results;
using EPenT.Models.Vulnerabilities;

namespace EPenT.Modules.Exploitation
{
    public class ExploitationModule
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<ExploitationModule> _logger;
        private readonly SecurityContext _securityContext;
        private readonly PrivilegeEscalation _privilegeEscalation;
        private readonly ServiceExploits _serviceExploits;
        private readonly RegistryExploits _registryExploits;
        private readonly UACBypass _uacBypass;
        private readonly KernelExploits _kernelExploits;

        public ExploitationModule(IConfiguration configuration, ILogger<ExploitationModule> logger, SecurityContext securityContext)
        {
            _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _securityContext = securityContext ?? throw new ArgumentNullException(nameof(securityContext));

            _privilegeEscalation = new PrivilegeEscalation(_configuration, _logger, _securityContext);
            _serviceExploits = new ServiceExploits(_configuration, _logger, _securityContext);
            _registryExploits = new RegistryExploits(_configuration, _logger, _securityContext);
            _uacBypass = new UACBypass(_configuration, _logger, _securityContext);
            _kernelExploits = new KernelExploits(_configuration, _logger, _securityContext);
        }

        public async Task<ExploitationResults> ExecuteAsync()
        {
            var results = new ExploitationResults
            {
                ModuleName = "Exploitation",
                StartTime = DateTime.UtcNow,
                Success = true,
                ExploitResults = new List<ExploitResult>(),
                PrivilegeEscalationAttempts = new List<PrivilegeEscalationResult>(),
                ServiceExploitResults = new List<ServiceExploitResult>(),
                RegistryExploitResults = new List<RegistryExploitResult>(),
                UACBypassResults = new List<UACBypassResult>(),
                KernelExploitResults = new List<KernelExploitResult>()
            };

            try
            {
                _logger.LogInformation("Starting exploitation phase");

                if (IsSafeModeEnabled())
                {
                    _logger.LogInformation("Safe mode enabled - limiting exploitation techniques");
                }

                if (IsPrivilegeEscalationEnabled())
                {
                    _logger.LogInformation("Executing privilege escalation techniques");
                    results.PrivilegeEscalationAttempts = await _privilegeEscalation.ExecuteAsync();
                }

                if (IsServiceExploitationEnabled())
                {
                    _logger.LogInformation("Executing service exploitation techniques");
                    results.ServiceExploitResults = await _serviceExploits.ExecuteAsync();
                }

                if (IsRegistryExploitationEnabled())
                {
                    _logger.LogInformation("Executing registry exploitation techniques");
                    results.RegistryExploitResults = await _registryExploits.ExecuteAsync();
                }

                if (IsUACBypassEnabled())
                {
                    _logger.LogInformation("Executing UAC bypass techniques");
                    results.UACBypassResults = await _uacBypass.ExecuteAsync();
                }

                if (IsKernelExploitationEnabled() && !IsSafeModeEnabled())
                {
                    _logger.LogInformation("Executing kernel exploitation techniques");
                    results.KernelExploitResults = await _kernelExploits.ExecuteAsync();
                }

                results.EndTime = DateTime.UtcNow;
                results.Duration = results.EndTime - results.StartTime;

                CompileExploitationResults(results);
                LogExploitationResults(results);

                _logger.LogInformation($"Exploitation completed in {results.Duration.TotalSeconds:F2} seconds");

                return results;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exploitation module execution failed");
                results.Success = false;
                results.ErrorMessage = ex.Message;
                results.EndTime = DateTime.UtcNow;
                return results;
            }
        }

        private void CompileExploitationResults(ExploitationResults results)
        {
            try
            {
                var allExploits = new List<ExploitResult>();

                foreach (var privEsc in results.PrivilegeEscalationAttempts)
                {
                    allExploits.Add(new ExploitResult
                    {
                        ExploitName = privEsc.TechniqueName,
                        ExploitType = "Privilege Escalation",
                        Success = privEsc.Success,
                        Severity = privEsc.Severity,
                        Description = privEsc.Description,
                        Evidence = privEsc.Evidence,
                        ExecutionTime = privEsc.ExecutionTime,
                        Target = privEsc.TargetPath ?? "System"
                    });
                }

                foreach (var serviceExploit in results.ServiceExploitResults)
                {
                    allExploits.Add(new ExploitResult
                    {
                        ExploitName = serviceExploit.ServiceName,
                        ExploitType = "Service Exploitation",
                        Success = serviceExploit.Success,
                        Severity = serviceExploit.Severity,
                        Description = serviceExploit.Description,
                        Evidence = serviceExploit.Evidence,
                        ExecutionTime = serviceExploit.ExecutionTime,
                        Target = serviceExploit.ServicePath
                    });
                }

                foreach (var regExploit in results.RegistryExploitResults)
                {
                    allExploits.Add(new ExploitResult
                    {
                        ExploitName = regExploit.ExploitName,
                        ExploitType = "Registry Exploitation",
                        Success = regExploit.Success,
                        Severity = regExploit.Severity,
                        Description = regExploit.Description,
                        Evidence = regExploit.Evidence,
                        ExecutionTime = regExploit.ExecutionTime,
                        Target = regExploit.RegistryPath
                    });
                }

                foreach (var uacBypass in results.UACBypassResults)
                {
                    allExploits.Add(new ExploitResult
                    {
                        ExploitName = uacBypass.BypassMethod,
                        ExploitType = "UAC Bypass",
                        Success = uacBypass.Success,
                        Severity = uacBypass.Severity,
                        Description = uacBypass.Description,
                        Evidence = uacBypass.Evidence,
                        ExecutionTime = uacBypass.ExecutionTime,
                        Target = uacBypass.TargetExecutable
                    });
                }

                foreach (var kernelExploit in results.KernelExploitResults)
                {
                    allExploits.Add(new ExploitResult
                    {
                        ExploitName = kernelExploit.ExploitName,
                        ExploitType = "Kernel Exploitation",
                        Success = kernelExploit.Success,
                        Severity = kernelExploit.Severity,
                        Description = kernelExploit.Description,
                        Evidence = kernelExploit.Evidence,
                        ExecutionTime = kernelExploit.ExecutionTime,
                        Target = kernelExploit.TargetDriver ?? "Kernel"
                    });
                }

                results.ExploitResults = allExploits.OrderByDescending(e => e.Success).ThenBy(e => e.Severity).ToList();
                results.TotalExploitsAttempted = allExploits.Count;
                results.SuccessfulExploits = allExploits.Count(e => e.Success);
                results.FailedExploits = allExploits.Count(e => !e.Success);
                results.HighSeverityExploits = allExploits.Count(e => e.Severity == "High");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to compile exploitation results");
            }
        }

        private bool IsSafeModeEnabled()
        {
            return _configuration.GetValue<bool>("Modules:Exploitation:SafeMode", true);
        }

        private bool IsPrivilegeEscalationEnabled()
        {
            return _configuration.GetValue<bool>("Modules:Exploitation:PrivilegeEscalation", true);
        }

        private bool IsServiceExploitationEnabled()
        {
            return _configuration.GetValue<bool>("Modules:Exploitation:ServiceExploits", true);
        }

        private bool IsRegistryExploitationEnabled()
        {
            return _configuration.GetValue<bool>("Modules:Exploitation:RegistryExploits", true);
        }

        private bool IsUACBypassEnabled()
        {
            return _configuration.GetValue<bool>("Modules:Exploitation:UACBypass", true);
        }

        private bool IsKernelExploitationEnabled()
        {
            return _configuration.GetValue<bool>("Modules:Exploitation:KernelExploits", false);
        }

        private void LogExploitationResults(ExploitationResults results)
        {
            _logger.LogInformation("Exploitation Results Summary:");
            _logger.LogInformation($"  Total Exploits Attempted: {results.TotalExploitsAttempted}");
            _logger.LogInformation($"  Successful Exploits: {results.SuccessfulExploits}");
            _logger.LogInformation($"  Failed Exploits: {results.FailedExploits}");
            _logger.LogInformation($"  High Severity Exploits: {results.HighSeverityExploits}");
            _logger.LogInformation($"  Privilege Escalation Attempts: {results.PrivilegeEscalationAttempts.Count}");
            _logger.LogInformation($"  Service Exploits: {results.ServiceExploitResults.Count}");
            _logger.LogInformation($"  Registry Exploits: {results.RegistryExploitResults.Count}");
            _logger.LogInformation($"  UAC Bypasses: {results.UACBypassResults.Count}");
            _logger.LogInformation($"  Kernel Exploits: {results.KernelExploitResults.Count}");

            if (results.SuccessfulExploits > 0)
            {
                _logger.LogWarning($"{results.SuccessfulExploits} successful exploits found - system may be compromised");
            }
        }
    }
}