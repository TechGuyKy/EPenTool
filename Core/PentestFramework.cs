using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using EPenT.Models.Results;
using EPenT.Modules.Reconnaissance;
using EPenT.Modules.Exploitation;
using EPenT.Modules.DefenseEvasion;
using EPenT.Modules.CredentialAccess;
using EPenT.Modules.Persistence;
using EPenT.Modules.LateralMovement;
using EPenT.Modules.PostExploitation;
using EPenT.Modules.Exfiltration;
using EPenT.Modules.AntiForensics;
using EPenT.Reporting;

namespace EPenT.Core
{
    public class PentestFramework
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<PentestFramework> _logger;
        private readonly AssessmentEngine _assessmentEngine;
        private readonly SecurityContext _securityContext;
        private readonly FrameworkConfiguration _frameworkConfig;
        private readonly ReportingEngine _reportingEngine;

        private string _targetHost = "localhost";
        private string _outputPath = "./Output";
        private List<string> _enabledModules = new List<string>();
        private bool _stealthMode = false;
        private bool _dryRun = false;
        private DateTime _assessmentStartTime;
        private DateTime _assessmentEndTime;

        public PentestFramework(IConfiguration configuration, ILogger<PentestFramework> logger)
        {
            _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));

            _frameworkConfig = new FrameworkConfiguration(_configuration);
            _securityContext = new SecurityContext(_logger);
            _assessmentEngine = new AssessmentEngine(_configuration, _logger, _securityContext);
            _reportingEngine = new ReportingEngine(_configuration, _logger);

            InitializeDefaultSettings();
        }

        public void SetTarget(string target)
        {
            if (string.IsNullOrWhiteSpace(target))
                throw new ArgumentException("Target cannot be null or empty", nameof(target));

            _targetHost = target;
            _logger.LogInformation($"Target set to: {_targetHost}");
        }

        public void SetOutputPath(string outputPath)
        {
            if (string.IsNullOrWhiteSpace(outputPath))
                throw new ArgumentException("Output path cannot be null or empty", nameof(outputPath));

            _outputPath = outputPath;
            _logger.LogInformation($"Output path set to: {_outputPath}");
        }

        public void SetEnabledModules(string[] modules)
        {
            if (modules == null || modules.Length == 0)
                throw new ArgumentException("Modules array cannot be null or empty", nameof(modules));

            _enabledModules = modules.ToList();
            _logger.LogInformation($"Enabled modules: {string.Join(", ", _enabledModules)}");
        }

        public void EnableStealthMode()
        {
            _stealthMode = true;
            _logger.LogInformation("Stealth mode enabled");
        }

        public void EnableDryRun()
        {
            _dryRun = true;
            _logger.LogInformation("Dry run mode enabled");
        }

        public async Task<AssessmentResults> ExecuteAssessment()
        {
            _assessmentStartTime = DateTime.UtcNow;
            _logger.LogInformation("Starting penetration test assessment");

            var results = new AssessmentResults
            {
                AssessmentId = Guid.NewGuid(),
                StartTime = _assessmentStartTime,
                Target = _targetHost,
                Framework = "EliteWindowsPentestSuite",
                Version = "1.0.0"
            };

            try
            {
                await _securityContext.InitializeAsync();

                if (_frameworkConfig.ValidateTargets && !await ValidateTarget())
                {
                    throw new InvalidOperationException($"Target validation failed for: {_targetHost}");
                }

                results = await _assessmentEngine.ExecuteAssessment(_targetHost, _enabledModules, _stealthMode, _dryRun);

                _assessmentEndTime = DateTime.UtcNow;
                results.EndTime = _assessmentEndTime;
                results.Duration = _assessmentEndTime - _assessmentStartTime;

                _logger.LogInformation($"Assessment completed in {results.Duration.TotalMinutes:F2} minutes");

                return results;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Assessment execution failed");
                results.Success = false;
                results.ErrorMessage = ex.Message;
                results.EndTime = DateTime.UtcNow;
                return results;
            }
        }

        public async Task GenerateReports(AssessmentResults results, string format)
        {
            try
            {
                _logger.LogInformation($"Generating reports in {format} format");
                await _reportingEngine.GenerateReport(results, format, _outputPath);
                _logger.LogInformation("Report generation completed");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Report generation failed");
                throw;
            }
        }

        private void InitializeDefaultSettings()
        {
            _targetHost = _frameworkConfig.DefaultTarget;
            _outputPath = _frameworkConfig.DefaultOutputPath;

            var defaultModules = new List<string> { "reconnaissance", "exploitation" };
            if (_enabledModules.Count == 0)
            {
                _enabledModules = defaultModules;
            }
        }

        private async Task<bool> ValidateTarget()
        {
            try
            {
                if (_targetHost == "localhost" || _targetHost == "127.0.0.1")
                    return true;

                if (!_frameworkConfig.AllowRemoteTargets)
                {
                    _logger.LogWarning("Remote targets are disabled in configuration");
                    return false;
                }

                _logger.LogInformation($"Validating target: {_targetHost}");
                return await Task.FromResult(true);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Target validation failed");
                return false;
            }
        }
    }
}